Documentation du Mini SGBDR en C
Introduction
Ce document décrit les différentes parties d'une application de gestion de base de données simple écrite en C.
Il permet à un utilisateur de créer des tables, d'insérer, de sélectionner, d'afficher, de supprimer, de mettre à jour, de trier et de joindre des données.

Constants and Structures
Constantes


#define MAX_TABLES 10
#define MAX_FIELDS 10
#define MAX_FIELD_NAME 20
#define MAX_FIELD_TYPE 10
#define MAX_RECORDS 100
MAX_TABLES : Maximum de tables pouvant être créées.
MAX_FIELDS : Maximum de champs dans une table.
MAX_FIELD_NAME : Taille maximale pour le nom d'un champ.
MAX_FIELD_TYPE : Taille maximale pour le type d'un champ.
MAX_RECORDS : Maximum de lignes pouvant être insérées dans une table.

Structures
Champ

typedef struct {
    char nom[MAX_FIELD_NAME];
    char type[MAX_FIELD_TYPE];
} Champ;
Représente un champ dans une table, en stockant le nom et le type (e.g., entier, chaîne).

Table

typedef struct {
    char nom[MAX_FIELD_NAME];
    Champ champs[MAX_FIELDS];
    int nombre_champs;
    int nombre_enrestre;
    char donnees[MAX_RECORDS][MAX_FIELDS][MAX_FIELD_TYPE];
} Table;
Représente une table, comprenant son nom, les champs qu'elle contient, le nombre de champs, le nombre d'enregistrements, et un tableau pour stocker les données de chaque enregistrement.

Variables Externes


extern Table tables[MAX_TABLES];
extern int nombre_tables;
tables : Un tableau global qui stocke toutes les tables créées.
nombre_tables : Compte le nombre de tables créées.
Fonctions
1. void creer_table()
Crée une nouvelle table avec des champs définis par l'utilisateur.

Description :
Cette fonction demande à l'utilisateur de fournir le nom de la table, le nombre de champs, et les détails de chaque champ. Elle vérifie également si le nombre maximal de tables a été atteint.

2. void inserer_donnees()
Insère de nouvelles données dans une table existante.

Description :
Une fois qu'une table est choisie par l'utilisateur, cette fonction permet d'entrer les données pour chaque champ. Elle vérifie que le nombre maximum d'enregistrements n'est pas dépassé.

3. void selectionner_donnees()
Sélectionne et affiche les données d'une table en fonction d'une condition.

Description :
Cette fonction demande à l'utilisateur de spécifier une condition (e.g., id=5).
Elle parcourt les enregistrements de la table choisie et affiche ceux qui correspondent à la condition.

4. void afficher_donnees()
Affiche toutes les données d'une table spécifiée.

Description :
L'utilisateur sélectionne une table, et la fonction affiche les noms des champs et toutes les lignes de données stockées dans cette table.

5. void supprimer_donnees()
Supprime des données d'une table en fonction d'une condition.

Description :
L'utilisateur choisit une table et spécifie une condition pour la suppression.
La fonction parcourt la table, supprime toutes les lignes qui correspondent à la condition, et déplace les lignes suivantes pour combler l'espace.

6. void mettre_a_jour_donnees()
Met à jour des données dans une table déterminée par une condition.

Description :
La fonction permet à l'utilisateur de sélectionner une table et de saisir une condition. Les enregistrements correspondants sont mis à jour avec de nouvelles valeurs fournies par l'utilisateur.

7. void trier_donnees()
Trie les enregistrements d'une table basée sur un champ spécifié.

Description :
L'utilisateur choisit une table et un champ sur lequel trier.
La fonction utilise un algorithme de tri (par exemple, tri à bulles) pour organiser les enregistrements en fonction des valeurs du champ choisi.

8. void joindre_tables()
Permet de joindre deux tables sur une condition spécifiée.

Description :
L'utilisateur sélectionne deux tables et une condition de jointure.
La fonction affiche les enregistrements des deux tables qui satisfont la condition.

Utilisation
L'utilisateur interagit avec le programme via un menu console. 
Les choix sont traités par une boucle qui continue de s'exécuter jusqu'à ce que l'utilisateur décide de quitter en entrant 0.
À chaque étape, des entrées utilisateur sont demandées pour déterminer les actions à réaliser.

Limitations et Améliorations
Validation des entrées : Améliorer la validation des entrées pour éviter les erreurs d'overflow et les entrées inappropriées.
Gestion des types : Étendre le support des types pour inclure des entiers et des chaînes séparément.
Fonctionnalités de recherche avancées : Améliorer la logique de condition pour accepter des requêtes plus complexes.
Interface utilisateur : Envisager une interface graphique ou une API pour une utilisation plus conviviale
